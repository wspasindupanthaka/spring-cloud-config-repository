elastic-query-service:
  version: v1
  custom-audience: elastic-query-service
  webclient:
    connect-timeout-ms: 10000
    read-timeout-ms: 10000
    write-timeout-ms: 10000
    max-in-memory-size: 10485760 # 10MB
    content-type: 'application/json'
    accept-type: 'application/json'
    query-type: 'KAFKA_STATE_STORE'
  query-from-kafka-state-store:
    method: GET
    uri: "http://gateway-service/kafka-streams-service/get-word-count-by-word/{word}"
    accept: ${elastic-query-service.webclient.accept-type}

server:
  port: 9193
  servlet:
    context-path: /

spring:
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9190/auth/realms/microservices-realm
          jwk-set-uri: http://localhost:9190/auth/realms/microservices-realm/protocol/openid-connect/certs
      client:
        registration:
          keycloak:
            client-id: 'elastic-query-service'
            client-secret: '08e1b1cd-b548-4d96-8c86-5b21aa8ec687'
            authorizationGrantType: client_credentials
        provider:
          keycloak:
            tokenUri: http://localhost:9190/auth/realms/microservices-realm/protocol/openid-connect/token

elastic-query-config:
  text-field: text

elastic-config:
  index-name: twitter-index
  connection-url: http://localhost:9200
  connect-timeout-ms: 5000
  socket-timeout-ms: 30000

user-config:
  user-name: pasindu
  password: pasindu
  roles: USER

security:
  paths-to-ignore: /actuator/**

management:
  endpoints:
    web:
      base-path: /actuator
      exposure.include: health, prometheus
      path-mapping.prometheus: metrics
  endpoint:
    health:
      show-details: always
    prometheus:
      cache.time-to-live: 1ms